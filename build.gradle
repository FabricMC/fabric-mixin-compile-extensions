plugins {
	id 'java'
	id 'maven-publish'
	id "com.diffplug.spotless" version "6.3.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'net.fabricmc'
archivesBaseName = project.name
version = '0.5.0'

def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

repositories {
	maven {
		name = "Fabric"
		url = 'https://maven.fabricmc.net/'
	}
}

dependencies {
	implementation 'net.fabricmc:mapping-io:0.2.1'
	implementation ('net.fabricmc:sponge-mixin:0.11.4+mixin.0.8.5') {
		transitive = false
	}
	implementation 'org.ow2.asm:asm:9.3'
	implementation 'org.ow2.asm:asm-tree:9.3'
}

spotless {
	java {
		licenseHeaderFile(rootProject.file("HEADER"))
	}
}

java {
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

publishing {
	publications {
		plugin(MavenPublication) { publication ->
			groupId project.group
			artifactId project.archivesBaseName
			version project.version

			from components.java
		}
	}
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/fabric-mixin-compile-extensions/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
